import pylcp
import numpy as np
from matplotlib import pyplot as plt
from scipy import constants as const
from sympy.physics.wigner import wigner_3j, wigner_6j, wigner_9j
import time
import pathos
from sympy import Symbol
import numbers
from scipy.optimize import bisect
gamma = 2*np.pi*84e6 # Hz
k = 2*np.pi/227.5e-9 # m^-1

t_unit = 1/gamma
#t_unit = 1e-1

m_unit = 1/k
#m_unit = 1e-9

velocity_unit = m_unit/t_unit
accel_unit = m_unit/t_unit**2
Hz_unit = 1/t_unit
Js_unit = const.hbar # kg m^2/s
mass_unit = Js_unit*t_unit/m_unit**2
HzperT_unit = const.value("Bohr magneton")/(Js_unit)
T_unit = Hz_unit/HzperT_unit
amu_unit = mass_unit/1.66e-27
cm_unit = m_unit/1e-2
F_unit = mass_unit*m_unit/t_unit**2
I_sat = (np.pi*const.h*const.c*gamma)/(3*227.5e-9**3) # W/m^2
# print(t_unit)
# print(cm_unit)
# print(velocity_unit)
# print(accel_unit)
ksim=k*m_unit
gammasim=gamma/Hz_unit
# print(ksim)
# print(gammasim)
# (F1, F) IAl = 5/2, IF = 1/2, F1 = J + IAl, F = F1 + IF
labels = [(3/2,1),(3/2,2),(5/2,2),(5/2,3),(7/2,3),(7/2,4)]
full_labels = np.concatenate([[(i[0], i[1], j) for j in np.arange(-i[1],i[1]+1,1)] for i in labels])
mu_q = {}
d_q = {}
H0 = {}
mu_q['X(v=0)'] = np.zeros((3,full_labels.shape[0],full_labels.shape[0]))
#mu_q['X(v=1)'] = np.zeros((3,full_labels.shape[0],full_labels.shape[0]))
H0['X(v=0)'] = (2*np.pi/Hz_unit)*np.diag(np.concatenate([[11.235e6]*8, [0]*12, [7.914e6]*16]))
#H0['X(v=1)'] = np.zeros((full_labels.shape[0],full_labels.shape[0]))
H0['A(v=0)'] = (2*np.pi/Hz_unit)*np.diag([9.06039e7, 9.06039e7, 9.06039e7, 0., 0., 0., 0., 0., 2.09987e8, 2.09987e8, 2.09987e8, 2.09987e8, 2.09987e8, 1.99498e8, 1.99498e8, 1.99498e8, 1.99498e8, 1.99498e8, 1.99498e8, 1.99498e8, 3.61039e8, 3.61039e8, 3.61039e8, 3.61039e8, 3.61039e8, 3.61039e8, 3.61039e8, 4.36374e8, 4.36374e8, 4.36374e8, 4.36374e8, 4.36374e8, 4.36374e8, 4.36374e8, 4.36374e8, 4.36374e8])
# def AState_mu_q(J, lbls, I1, I2):
#     def matrix_element(p,F1,F,MF,F1p,Fp,MFp):
#         return float((-1)**(F-MF+F1p+F+I2+1+J+F1+I1+1)*np.sqrt((2*F+1)*(2*Fp+1)*(2*F1+1)*(2*F1p+1)*(2*J+1)*(2*J+1))*wigner_3j(F,1,Fp,-MF,p,MFp)*wigner_3j(J,1,J,-1,0,1)*wigner_6j(F1p,Fp,I2,F,F1,1)*wigner_6j(J,F1p,I1,F1,J,1))
    
#     return np.array([[[matrix_element(i,*l2,*l1) for l2 in lbls] for l1 in lbls] for i in [-1,0,1]])

def AState_mu_q(J, lbls, I1, I2): # for the A1Pi state
    Lambda = 1
    def matrix_element(p,F1,F,MF,F1p,Fp,MFp):
        return float((-1)**(F-MF)*wigner_3j(F,1,Fp,-MF,p,MFp)*np.sqrt(3*(2*F+1)*(2*Fp+1))*wigner_9j(F,Fp,1,F1,F1p,1,I2,I2,0)*np.sqrt(3*(2*F1+1)*(2*F1p+1))*wigner_9j(F1,F1p,1,J,J,1,I1,I1,0)*Lambda*(-1)**(J-Lambda)*np.sqrt((2*J+1)*(2*J+1))*wigner_3j(J,1,J,-Lambda,0,Lambda))
    return np.array([[[matrix_element(i,*l2,*l1) for l2 in lbls] for l1 in lbls] for i in [-1,0,1]])
def H0_Singlet(J, Lambda, state_labels, I1, I2):
    def _delta(i, j, eps = 1e-6):
        return abs(i-j) < eps
    def nuclear_rotation(F1, F, MF, F1p, Fp, MFp):
        return (-1)**(J+F1+I1+J-Lambda)*_delta(F,Fp)*_delta(F1,F1p)*wigner_6j(I2, F1p, I1, F1, J, 1)*\
               wigner_3j(J, 1, J, -Lambda, 0, Lambda)*np.sqrt((2*J+1)*(2*J+1)*I1*(I1+1)*(2*I1))
        pass
        
    pass
mu_q['A(v=0)'] = AState_mu_q(1, full_labels, 5/2,1/2)
dijq = np.array([[[0.,-0.,0.,-0.05505523,0.,-0.,0.,-0.,-0.66785852,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.],[0.35310312,-0.,0.,-0.,-0.03892993,-0.,0.,-0.,-0.,-0.47224729,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.],[0.,0.35310312,0.,-0.,0.,-0.02247621,0.,-0.,-0.,0.,-0.2726521,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,-0.27075745,0.,-0.,0.,-0.,0.,-0.,-0.518019,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.],[0.,-0.,0.,0.07277687,-0.,0.,-0.,0.,-0.16796935,0.,-0.,0.,-0.,-0.,-0.22107253,-0.,0.,-0.,0.,-0.,-0.,-0.42296075,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.],[0.26454644,-0.,0.,0.,0.0891331,0.,-0.,0.,-0.,-0.2057196,-0.,0.,-0.,-0.,0.,-0.17124205,0.,-0.,0.,-0.,-0.,0.,-0.32762399,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.],[0.,0.45820787,0.,0.,-0.,0.0891331,-0.,0.,-0.,0.,-0.2057196,0.,-0.,-0.,0.,-0.,-0.12108641,-0.,0.,-0.,-0.,0.,-0.,-0.23166514,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.],[0.,-0.,0.64800379,0.,-0.,0.,0.07277687,0.,-0.,0.,-0.,-0.16796935,-0.,-0.,0.,-0.,0.,-0.06990927,0.,-0.,-0.,0.,-0.,0.,-0.13375193,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.],[0.,-0.,0.,-0.,0.,-0.,0.,-0.,-0.,0.,-0.,0.,-0.,0.63021238,-0.,0.,-0.,0.,-0.,0.,-0.26048402,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.],[0.,-0.,0.,-0.32370517,0.,-0.,0.,-0.,-0.01697994,0.,-0.,0.,-0.,0.,0.51456625,0.,-0.,0.,-0.,0.,-0.,-0.21268431,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.],[0.07126583,-0.,0.,-0.,-0.39645625,-0.,0.,-0.,-0.,-0.0207961,-0.,0.,-0.,0.,-0.,0.39858131,-0.,0.,-0.,0.,-0.,0.,-0.16474456,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.],[0.,0.12343605,0.,-0.,0.,-0.39645625,0.,-0.,-0.,0.,-0.0207961,0.,-0.,0.,-0.,0.,0.28183954,0.,-0.,0.,-0.,0.,-0.,-0.116492,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.],[0.,-0.,0.17456493,-0.,0.,-0.,-0.32370517,-0.,-0.,0.,-0.,-0.01697994,-0.,0.,-0.,0.,-0.,0.16272014,-0.,0.,-0.,0.,-0.,0.,-0.06725668,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.59645448,0.,-0.,0.,-0.,0.,-0.,0.,-0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,-0.08413443,0.,-0.,0.,-0.,0.,-0.,0.1035144,-0.,0.,-0.,0.,-0.,0.,-0.,-0.51654474,-0.,0.,-0.,0.,-0.,0.,-0.],[0.,-0.,0.,0.17098982,-0.,0.,-0.,0.,-0.0462408,0.,-0.,0.,-0.,-0.,-0.10861708,-0.,0.,-0.,0.,-0.,0.,0.13363651,0.,-0.,0.,-0.,0.,-0.,0.,-0.43655998,0.,-0.,0.,-0.,0.,-0.],[0.,-0.,0.,0.,0.29616305,0.,-0.,0.,-0.,-0.08009142,-0.,0.,-0.,-0.,0.,-0.11898405,0.,-0.,0.,-0.,0.,-0.,0.14639146,-0.,0.,-0.,0.,-0.,0.,-0.,-0.35644973,-0.,0.,-0.,0.,-0.],[0.,-0.,0.,0.,-0.,0.4188378,-0.,0.,-0.,0.,-0.11326637,0.,-0.,-0.,0.,-0.,-0.11898405,-0.,0.,-0.,0.,-0.,0.,0.14639146,0.,-0.,0.,-0.,0.,-0.,0.,-0.27610477,0.,-0.,0.,-0.],[0.,-0.,0.,0.,-0.,0.,0.54071728,0.,-0.,0.,-0.,-0.14622626,-0.,-0.,0.,-0.,0.,-0.10861708,0.,-0.,0.,-0.,0.,-0.,0.13363651,-0.,0.,-0.,0.,-0.,0.,-0.,-0.19523556,-0.,0.,-0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.66224071,-0.,0.,-0.,0.,-0.17908986,-0.,0.,-0.,0.,-0.,-0.08413443,-0.,0.,-0.,0.,-0.,0.,0.1035144,0.,-0.,0.,-0.,0.,-0.,0.,-0.1127193,0.,-0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,-0.,0.,-0.,0.,-0.,0.,-0.,-0.13070954,0.,-0.,0.,-0.,0.,-0.,0.,-0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,-0.089639,0.,-0.,0.,-0.,0.,-0.,-0.38954428,0.,-0.,0.,-0.,0.,-0.,-0.,-0.11319778,-0.,0.,-0.,0.,-0.,0.,-0.],[0.,-0.,0.,0.0501125,-0.,0.,-0.,0.,0.14201886,-0.,0.,-0.,0.,-0.,-0.11572346,-0.,0.,-0.,0.,-0.,-0.,-0.5028995,-0.,0.,-0.,0.,-0.,-0.,0.,-0.09566959,0.,-0.,0.,-0.,0.,-0.],[0.,-0.,0.,0.,0.0867974,0.,-0.,0.,0.,0.24598388,0.,-0.,0.,-0.,0.,-0.1267687,0.,-0.,0.,-0.,-0.,0.,-0.5508988,0.,-0.,0.,-0.,-0.,0.,-0.,-0.07811389,-0.,0.,-0.,0.,-0.],[0.,-0.,0.,0.,-0.,0.12275006,-0.,0.,0.,-0.,0.34787374,-0.,0.,-0.,0.,-0.,-0.1267687,-0.,0.,-0.,-0.,0.,-0.,-0.5508988,-0.,0.,-0.,-0.,0.,-0.,0.,-0.06050676,0.,-0.,0.,-0.],[0.,-0.,0.,0.,-0.,0.,0.15846965,0.,0.,-0.,0.,0.44910307,0.,-0.,0.,-0.,0.,-0.11572346,0.,-0.,-0.,0.,-0.,0.,-0.5028995,0.,-0.,-0.,0.,-0.,0.,-0.,-0.04278474,-0.,0.,-0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.19408489,0.,-0.,0.,-0.,0.55003668,-0.,0.,-0.,0.,-0.,-0.089639,-0.,-0.,0.,-0.,0.,-0.,-0.38954428,-0.,-0.,0.,-0.,0.,-0.,0.,-0.02470178,0.,-0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,-0.35416298,0.,-0.,0.,-0.,0.,-0.,0.,-0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,0.11414753,-0.,0.,-0.,0.,-0.,0.,-0.01969524,0.,-0.,0.,-0.,0.,-0.,-0.,-0.46851358,-0.,0.,-0.,0.,-0.,0.,-0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,0.19770933,0.,-0.,0.,-0.,0.,-0.,-0.03411316,-0.,0.,-0.,0.,-0.,-0.,0.,-0.53124446,0.,-0.,0.,-0.,0.,-0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.27960322,-0.,0.,-0.,0.,-0.,0.,-0.04824329,0.,-0.,0.,-0.,-0.,0.,-0.,-0.55998083,-0.,0.,-0.,0.,-0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,0.3609662,0.,-0.,0.,-0.,0.,-0.,-0.06228182,-0.,0.,-0.,-0.,0.,-0.,0.,-0.55998083,0.,-0.,0.,-0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.4420915,-0.,0.,-0.,0.,-0.,0.,-0.07627934,0.,-0.,-0.,0.,-0.,0.,-0.,-0.53124446,-0.,0.,-0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,0.52308972,0.,-0.,0.,-0.,0.,-0.,-0.09025493,-0.,-0.,0.,-0.,0.,-0.,0.,-0.46851358,0.,-0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,-0.,0.60401198,-0.,0.,-0.,0.,-0.,0.,-0.10421742,-0.,0.,-0.,0.,-0.,0.,-0.,-0.35416298,-0.]],[[-0.35310312,-0.,0.,-0.,-0.03892993,-0.,0.,-0.,-0.,-0.47224729,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.],[0.,-0.,0.,-0.,0.,-0.04495241,0.,-0.,-0.,0.,-0.54530419,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.],[0.,-0.,0.35310312,-0.,0.,-0.,-0.03892993,-0.,-0.,0.,-0.,-0.47224729,-0.,0.,-0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.],[0.,-0.,0.,-0.10292204,-0.,0.,-0.,0.,0.23754453,0.,-0.,0.,-0.,-0.,-0.15632189,-0.,0.,-0.,0.,-0.,-0.,-0.29907841,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.],[-0.45820787,-0.,0.,0.,-0.05146102,0.,-0.,0.,-0.,0.11877227,-0.,0.,-0.,-0.,0.,-0.19773328,0.,-0.,0.,-0.,-0.,0.,-0.37830759,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.],[0.,-0.52909288,0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,-0.,0.,-0.,-0.20972782,-0.,0.,-0.,-0.,0.,-0.,-0.4012558,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.],[0.,-0.,-0.45820787,0.,-0.,0.,0.05146102,0.,-0.,0.,-0.,-0.11877227,-0.,-0.,0.,-0.,0.,-0.19773328,0.,-0.,-0.,0.,-0.,0.,-0.37830759,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.10292204,-0.,0.,-0.,0.,-0.23754453,-0.,0.,-0.,0.,-0.,-0.15632189,-0.,-0.,0.,-0.,0.,-0.,-0.29907841,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.],[0.,-0.,0.,0.45778825,0.,-0.,0.,-0.,0.02401326,0.,-0.,0.,-0.,0.,0.36385329,0.,-0.,0.,-0.,0.,-0.,-0.15039052,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.],[-0.12343605,-0.,0.,-0.,0.22889412,-0.,0.,-0.,-0.,0.01200663,-0.,0.,-0.,0.,-0.,0.46024205,-0.,0.,-0.,0.,-0.,0.,-0.19023063,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.],[0.,-0.14253167,0.,-0.,0.,-0.,0.,-0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,0.48816041,0.,-0.,0.,-0.,0.,-0.,-0.20177005,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.],[0.,-0.,-0.12343605,-0.,0.,-0.,-0.22889412,-0.,-0.,0.,-0.,-0.01200663,-0.,0.,-0.,0.,-0.,0.46024205,-0.,0.,-0.,0.,-0.,0.,-0.19023063,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.],[0.,-0.,0.,-0.,0.,-0.,0.,-0.45778825,-0.,0.,-0.,0.,-0.02401326,0.,-0.,0.,-0.,0.,0.36385329,0.,-0.,0.,-0.,0.,-0.,-0.15039052,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.1457251,0.,-0.,0.,-0.,0.,-0.,-0.17929219,-0.,0.,-0.,0.,-0.,0.,-0.,-0.29822724,-0.,0.,-0.,0.,-0.,0.,-0.],[0.,-0.,0.,-0.38234485,-0.,0.,-0.,0.,0.10339758,0.,-0.,0.,-0.,-0.,0.09715007,-0.,0.,-0.,0.,-0.,0.,-0.11952813,0.,-0.,0.,-0.,0.,-0.,0.,-0.39047112,0.,-0.,0.,-0.,0.,-0.],[0.,-0.,0.,0.,-0.48363223,0.,-0.,0.,-0.,0.13078874,-0.,0.,-0.,-0.,0.,0.04857503,0.,-0.,0.,-0.,0.,-0.,-0.05976406,-0.,0.,-0.,0.,-0.,0.,-0.,-0.43655998,-0.,0.,-0.,0.,-0.],[0.,-0.,0.,0.,-0.,-0.51296945,-0.,0.,-0.,0.,0.13872241,0.,-0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.45087721,0.,-0.,0.,-0.],[0.,-0.,0.,0.,-0.,0.,-0.48363223,0.,-0.,0.,-0.,0.13078874,-0.,-0.,0.,-0.,0.,-0.04857503,0.,-0.,0.,-0.,0.,-0.,0.05976406,-0.,0.,-0.,0.,-0.,0.,-0.,-0.43655998,-0.,0.,-0.],[0.,-0.,0.,0.,-0.,0.,-0.,-0.38234485,-0.,0.,-0.,0.,0.10339758,-0.,0.,-0.,0.,-0.,-0.09715007,-0.,0.,-0.,0.,-0.,0.,0.11952813,0.,-0.,0.,-0.,0.,-0.,0.,-0.39047112,0.,-0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,-0.,0.,-0.,0.,-0.,0.,-0.1457251,0.,-0.,0.,-0.,0.,-0.,0.17929219,-0.,0.,-0.,0.,-0.,0.,-0.,-0.29822724,-0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,0.15525931,0.,-0.,0.,-0.,0.,-0.,0.67471048,0.,-0.,0.,-0.,0.,-0.,-0.,-0.06535477,-0.,0.,-0.,0.,-0.,0.,-0.],[0.,-0.,0.,-0.11205496,-0.,0.,-0.,0.,-0.31756382,-0.,0.,-0.,0.,-0.,0.10350621,-0.,0.,-0.,0.,-0.,-0.,0.44980699,-0.,0.,-0.,0.,-0.,-0.,0.,-0.08556948,0.,-0.,0.,-0.,0.,-0.],[0.,-0.,0.,0.,-0.14173956,0.,-0.,0.,0.,-0.40169,0.,-0.,0.,-0.,0.,0.0517531,0.,-0.,0.,-0.,-0.,0.,0.22490349,0.,-0.,0.,-0.,-0.,0.,-0.,-0.09566959,-0.,0.,-0.,0.,-0.],[0.,-0.,0.,0.,-0.,-0.15033751,-0.,0.,0.,-0.,-0.42605658,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,-0.,0.,-0.,0.,-0.,0.,-0.,-0.,0.,-0.,0.,-0.09880713,0.,-0.,0.,-0.],[0.,-0.,0.,0.,-0.,0.,-0.14173956,0.,0.,-0.,0.,-0.40169,0.,-0.,0.,-0.,0.,-0.0517531,0.,-0.,-0.,0.,-0.,0.,-0.22490349,0.,-0.,-0.,0.,-0.,0.,-0.,-0.09566959,-0.,0.,-0.],[0.,-0.,0.,0.,-0.,0.,-0.,-0.11205496,0.,-0.,0.,-0.,-0.31756382,-0.,0.,-0.,0.,-0.,-0.10350621,-0.,-0.,0.,-0.,0.,-0.,-0.44980699,-0.,-0.,0.,-0.,0.,-0.,0.,-0.08556948,0.,-0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.15525931,-0.,0.,-0.,0.,-0.,0.,-0.67471048,-0.,0.,-0.,0.,-0.,0.,-0.,-0.06535477,-0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.70832595,0.,-0.,0.,-0.,0.,-0.,0.,-0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,-0.30200599,-0.,0.,-0.,0.,-0.,0.,0.05210871,0.,-0.,0.,-0.,0.,-0.,-0.,0.53124446,-0.,0.,-0.,0.,-0.,0.,-0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.39541866,0.,-0.,0.,-0.,0.,-0.,0.06822631,-0.,0.,-0.,0.,-0.,-0.,0.,0.35416298,0.,-0.,0.,-0.,0.,-0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,-0.4420915,-0.,0.,-0.,0.,-0.,0.,0.07627934,0.,-0.,0.,-0.,-0.,0.,-0.,0.17708149,-0.,0.,-0.,0.,-0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.45659014,0.,-0.,0.,-0.,0.,-0.,0.07878096,-0.,0.,-0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,-0.4420915,-0.,0.,-0.,0.,-0.,0.,0.07627934,0.,-0.,-0.,0.,-0.,0.,-0.,-0.17708149,-0.,0.,-0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,-0.39541866,0.,-0.,0.,-0.,0.,-0.,0.06822631,-0.,-0.,0.,-0.,0.,-0.,0.,-0.35416298,0.,-0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,-0.,-0.30200599,-0.,0.,-0.,0.,-0.,0.,0.05210871,-0.,0.,-0.,0.,-0.,0.,-0.,-0.53124446,-0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.70832595]],[[0.,-0.35310312,0.,-0.,0.,-0.02247621,0.,-0.,-0.,0.,-0.2726521,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.],[0.,-0.,-0.35310312,-0.,0.,-0.,-0.03892993,-0.,-0.,0.,-0.,-0.47224729,-0.,0.,-0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.],[0.,-0.,0.,-0.,0.,-0.,0.,-0.05505523,-0.,0.,-0.,0.,-0.66785852,0.,-0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.],[0.64800379,-0.,0.,0.,-0.07277687,0.,-0.,0.,-0.,0.16796935,-0.,0.,-0.,-0.,0.,-0.06990927,0.,-0.,0.,-0.,-0.,0.,-0.13375193,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.],[0.,0.45820787,0.,0.,-0.,-0.0891331,-0.,0.,-0.,0.,0.2057196,0.,-0.,-0.,0.,-0.,-0.12108641,-0.,0.,-0.,-0.,0.,-0.,-0.23166514,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.],[0.,-0.,0.26454644,0.,-0.,0.,-0.0891331,0.,-0.,0.,-0.,0.2057196,-0.,-0.,0.,-0.,0.,-0.17124205,0.,-0.,-0.,0.,-0.,0.,-0.32762399,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.],[0.,-0.,0.,0.,-0.,0.,-0.,-0.07277687,-0.,0.,-0.,0.,0.16796935,-0.,0.,-0.,0.,-0.,-0.22107253,-0.,-0.,0.,-0.,0.,-0.,-0.42296075,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,-0.,0.,-0.,0.,-0.,0.,-0.27075745,-0.,0.,-0.,0.,-0.,0.,-0.518019,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.],[0.17456493,-0.,0.,-0.,0.32370517,-0.,0.,-0.,-0.,0.01697994,-0.,0.,-0.,0.,-0.,0.16272014,-0.,0.,-0.,0.,-0.,0.,-0.06725668,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.],[0.,0.12343605,0.,-0.,0.,0.39645625,0.,-0.,-0.,0.,0.0207961,0.,-0.,0.,-0.,0.,0.28183954,0.,-0.,0.,-0.,0.,-0.,-0.116492,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.],[0.,-0.,0.07126583,-0.,0.,-0.,0.39645625,-0.,-0.,0.,-0.,0.0207961,-0.,0.,-0.,0.,-0.,0.39858131,-0.,0.,-0.,0.,-0.,0.,-0.16474456,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.],[0.,-0.,0.,-0.,0.,-0.,0.,0.32370517,-0.,0.,-0.,0.,0.01697994,0.,-0.,0.,-0.,0.,0.51456625,0.,-0.,0.,-0.,0.,-0.,-0.21268431,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.],[0.,-0.,0.,-0.,0.,-0.,0.,-0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.63021238,-0.,0.,-0.,0.,-0.,0.,-0.26048402,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.],[0.,-0.,0.,0.66224071,-0.,0.,-0.,0.,-0.17908986,0.,-0.,0.,-0.,-0.,0.08413443,-0.,0.,-0.,0.,-0.,0.,-0.1035144,0.,-0.,0.,-0.,0.,-0.,0.,-0.1127193,0.,-0.,0.,-0.,0.,-0.],[0.,-0.,0.,0.,0.54071728,0.,-0.,0.,-0.,-0.14622626,-0.,0.,-0.,-0.,0.,0.10861708,0.,-0.,0.,-0.,0.,-0.,-0.13363651,-0.,0.,-0.,0.,-0.,0.,-0.,-0.19523556,-0.,0.,-0.,0.,-0.],[0.,-0.,0.,0.,-0.,0.4188378,-0.,0.,-0.,0.,-0.11326637,0.,-0.,-0.,0.,-0.,0.11898405,-0.,0.,-0.,0.,-0.,0.,-0.14639146,0.,-0.,0.,-0.,0.,-0.,0.,-0.27610477,0.,-0.,0.,-0.],[0.,-0.,0.,0.,-0.,0.,0.29616305,0.,-0.,0.,-0.,-0.08009142,-0.,-0.,0.,-0.,0.,0.11898405,0.,-0.,0.,-0.,0.,-0.,-0.14639146,-0.,0.,-0.,0.,-0.,0.,-0.,-0.35644973,-0.,0.,-0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.17098982,-0.,0.,-0.,0.,-0.0462408,-0.,0.,-0.,0.,-0.,0.10861708,-0.,0.,-0.,0.,-0.,0.,-0.13363651,0.,-0.,0.,-0.,0.,-0.,0.,-0.43655998,0.,-0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,-0.,0.,-0.,0.,-0.,0.,0.08413443,0.,-0.,0.,-0.,0.,-0.,-0.1035144,-0.,0.,-0.,0.,-0.,0.,-0.,-0.51654474,-0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.59645448],[0.,-0.,0.,0.19408489,-0.,0.,-0.,0.,0.55003668,-0.,0.,-0.,0.,-0.,0.089639,-0.,0.,-0.,0.,-0.,-0.,0.38954428,-0.,0.,-0.,0.,-0.,-0.,0.,-0.02470178,0.,-0.,0.,-0.,0.,-0.],[0.,-0.,0.,0.,0.15846965,0.,-0.,0.,0.,0.44910307,0.,-0.,0.,-0.,0.,0.11572346,0.,-0.,0.,-0.,-0.,0.,0.5028995,0.,-0.,0.,-0.,-0.,0.,-0.,-0.04278474,-0.,0.,-0.,0.,-0.],[0.,-0.,0.,0.,-0.,0.12275006,-0.,0.,0.,-0.,0.34787374,-0.,0.,-0.,0.,-0.,0.1267687,-0.,0.,-0.,-0.,0.,-0.,0.5508988,-0.,0.,-0.,-0.,0.,-0.,0.,-0.06050676,0.,-0.,0.,-0.],[0.,-0.,0.,0.,-0.,0.,0.0867974,0.,0.,-0.,0.,0.24598388,0.,-0.,0.,-0.,0.,0.1267687,0.,-0.,-0.,0.,-0.,0.,0.5508988,0.,-0.,-0.,0.,-0.,0.,-0.,-0.07811389,-0.,0.,-0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.0501125,0.,-0.,0.,-0.,0.14201886,-0.,0.,-0.,0.,-0.,0.11572346,-0.,-0.,0.,-0.,0.,-0.,0.5028995,-0.,-0.,0.,-0.,0.,-0.,0.,-0.09566959,0.,-0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,0.089639,-0.,0.,-0.,0.,-0.,0.,0.38954428,-0.,0.,-0.,0.,-0.,0.,-0.,-0.11319778,-0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,-0.,0.,-0.,0.,-0.,0.,-0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.13070954],[0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,0.60401198,-0.,0.,-0.,0.,-0.,0.,-0.10421742,0.,-0.,0.,-0.,0.,-0.,-0.,0.35416298,-0.,0.,-0.,0.,-0.,0.,-0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,0.52308972,0.,-0.,0.,-0.,0.,-0.,-0.09025493,-0.,0.,-0.,0.,-0.,-0.,0.,0.46851358,0.,-0.,0.,-0.,0.,-0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.4420915,-0.,0.,-0.,0.,-0.,0.,-0.07627934,0.,-0.,0.,-0.,-0.,0.,-0.,0.53124446,-0.,0.,-0.,0.,-0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,0.3609662,0.,-0.,0.,-0.,0.,-0.,-0.06228182,-0.,0.,-0.,-0.,0.,-0.,0.,0.55998083,0.,-0.,0.,-0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.27960322,-0.,0.,-0.,0.,-0.,0.,-0.04824329,0.,-0.,-0.,0.,-0.,0.,-0.,0.55998083,-0.,0.,-0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,0.19770933,0.,-0.,0.,-0.,0.,-0.,-0.03411316,-0.,-0.,0.,-0.,0.,-0.,0.,0.53124446,0.,-0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,-0.,0.11414753,-0.,0.,-0.,0.,-0.,0.,-0.01969524,-0.,0.,-0.,0.,-0.,0.,-0.,0.46851358,-0.],[0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,0.35416298],[0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.,-0.,0.,-0.,0.,-0.,0.,-0.,0.,-0.]]])
# dijq = np.einsum("ijk->kij",dijq)
d_q[("X(v=0)","A(v=0)")] = dijq#*np.sqrt(0.99)
mu_q.keys()
hamiltonian = pylcp.hamiltonian(mass=46/amu_unit, k=ksim, gamma=gammasim)
[hamiltonian.add_H_0_block(l, H) for l, H in H0.items()]
[hamiltonian.add_mu_q_block(l, mu, muB=1) for l, mu in mu_q.items()]
[hamiltonian.add_d_q_block(l[0],l[1], dq, k=ksim, gamma=gammasim) for l, dq in d_q.items()]
# hamiltonian.add_d_q_block("X(v=0)","A(v=0)",dijq,k=0,gamma=gammasim*0.99)
# hamiltonian.add_d_q_block("A(v=0)","X(v=1)",dijq,k=0,gamma=gammasim*0.01)
# hamiltonian.print_structure()
hamiltonian.e = hamiltonian.state_labels == "A(v=0)"
mag_field = pylcp.fields.quadrupoleMagneticField(500*1e-4*cm_unit*HzperT_unit/Hz_unit)
no_mag_field = pylcp.fields.constantMagneticField(np.array([0,0,0]))

def MOT_Beams_nov1(det_MOT, det_slower, repump_s, repump_delta, s=0.3, wb=0.5/cm_unit, p=1, *args):
    return {
    'X(v=0)->A(v=0)' : pylcp.laserBeams([
        {'kvec':np.array([-1/np.sqrt(2), -1/np.sqrt(2), 0.])*ksim, 'pol':p, 'delta':det_MOT, 's':s, 'wb':wb},
        {'kvec':np.array([1/np.sqrt(2), 1/np.sqrt(2), 0.])*ksim  , 'pol':p, 'delta':det_MOT, 's':s, 'wb':wb},
        {'kvec':np.array([1/np.sqrt(2), -1/np.sqrt(2), 0.])*ksim , 'pol':p, 'delta':det_MOT, 's':s, 'wb':wb},
        {'kvec':np.array([-1/np.sqrt(2), 1/np.sqrt(2), 0.])*ksim , 'pol':p, 'delta':det_MOT, 's':s, 'wb':wb},
        {'kvec':np.array([0., 0.,  1.])*ksim, 'pol':-p, 'delta':det_MOT, 's':s, 'wb':wb},
        {'kvec':np.array([0., 0., -1.])*ksim, 'pol':-p, 'delta':det_MOT, 's':s, 'wb':wb},
    ], beam_type=pylcp.gaussianBeam)}

m_step = 1e-5/t_unit

def captured_condition(t, y):
    if sum(map(lambda x : (x*cm_unit)**2, y[-3:])) > 1e-4:
        return -1
    if sum(map(lambda x : (velocity_unit*x)**2, y[-6:-3])) > 1:
        return -1
    return 1

def weak_cap_cond(v,p):
    if sum(map(lambda x : (x*cm_unit)**2, p)) > 2e-4:
        return -1
    if sum(map(lambda x : (velocity_unit*x)**2, v)) > 1.5:
        return -1
    return 1

def lost_condition(t, y):
    return y[-3]*cm_unit - 8

def backwards_lost(t, y):
    if (y[-3]*cm_unit < -10 and y[-6]*velocity_unit < 0):
        return -1
    return 1

def isCaptured(sol):
    # captured = -1
    # finalPosition = np.array([sol.r[i][-1] for i in range(3)])
    # finalVelocity = 0*np.array([sol.v[i][-1]*velocity_unit for i in range(3)])  # Fix capture cond
    # if (np.linalg.norm(finalPosition)**2 + np.linalg.norm(finalVelocity)**2 < 1e-2):
    #     #print('initial velocity: '+ str(sol.v[0][0]) +' captured')
    #     captured = 1 
    return weak_cap_cond(sol.v[:,-1],sol.r[:,-1])
    # return captured
    
def atomTrajectoryToMOT(v0, r0, eqn, angle = 0, classifier = isCaptured, tmax=150e-3/t_unit, max_step=m_step):
    print(v0*velocity_unit)
    eqn.set_initial_pop(np.concatenate([[1./36]*36,[0]*36]))
    if (isinstance(angle, numbers.Number)):
        eqn.set_initial_position_and_velocity(r0, np.array([v0*np.cos(angle),v0*np.sin(angle),0]))
    else:
        eqn.set_initial_position_and_velocity(r0, np.array([v0*np.cos(angle[0]),v0*np.sin(angle[0])*np.cos(angle[1]),v0*np.sin(angle[0])*np.sin(angle[1])]))
    eqn.evolve_motion([0., tmax], progress_bar=False,
                      max_step = max_step,
                      rtol=1e-3, atol=np.concatenate(([1e-3]*72,[1/velocity_unit,1/velocity_unit,1/velocity_unit,1e-3/cm_unit,1e-3/cm_unit,1e-3/cm_unit])),method="Radau", events=[captured_condition,lost_condition,backwards_lost])

    # print(classifier(eqn.sol))
    return classifier(eqn.sol)

def findCaptureVelocity(r0,eqn, **kwargs):
    # print('a')
    angle = kwargs.pop('angle',0)
    print(angle)
    if(atomTrajectoryToMOT(10/velocity_unit, r0, eqn, angle)==-1):
        return 0
    # print('b')
    return bisect(atomTrajectoryToMOT,10/velocity_unit, 150/velocity_unit,
       args=(r0, eqn, angle),
       xtol=0.1/velocity_unit, rtol=1e-3, full_output=False)

def captureVelocityForEq(ham, lasers, mfield, **kwargs):
    eq = pylcp.rateeq(lasers, mfield, ham, include_mag_forces=False)
    eq.set_initial_pop(np.concatenate([[1./36]*36,[0]*36]))
    return findCaptureVelocity(np.array([-80/cm_unit,0,0]), eq, **kwargs)

captured_condition.terminal = True
lost_condition.terminal = True
backwards_lost.terminal = True



theta_range = np.linspace(1e-6,20e-3+1e-6,40)
phi_range = np.linspace(0,2*np.pi,36, endpoint=False)

CORES = 256

def run(args):
    global progress
    with progress.get_lock():
        progress.value += 1
        if progress.value % 100 == 0 or True:
            print(f"{progress.value}/{total_runtime}: {100*progress.value/total_runtime:.2f}%")
    H = hamiltonian
    det_MOT = -0.5
    
    return captureVelocityForEq(H, MOT_Beams_nov1(det_MOT*gammasim, 0, 0, 0, s=0.3), mag_field, angle=args)

def init_worker(pgr, t_r):
    global progress, total_runtime
    progress = pgr
    total_runtime = t_r

def plot(data):
    fig, ax = plt.subplots(subplot_kw={'projection': 'polar'})
    cmesh = ax.pcolormesh(*np.meshgrid(phi_range, theta_range, indexing='ij'),data, cmap = 'gnuplot',shading="nearest")
    fig.colorbar(cmesh)
    plt.show()
#     color_norm = Normalize(0,1)
#     fig, axs = plt.subplots(2,4)
#     axs = axs.T.flatten()
#     for i, ax, d in zip(Hamiltonians.keys(), axs, data):
#         ax.axes.set_aspect('equal')
#         ax.pcolormesh(*(np.array(np.meshgrid(slower_range*hertz_unit/1e6, MOT_range*hertz_unit/1e6))),abundance_data[i]*d, cmap = 'gnuplot', norm = color_norm,shading='nearest')
#         ax.set_title(i)
#     cbar_ax = fig.add_axes([0.9, 0.15, 0.0125, 0.7])
#     cbar = fig.colorbar(ScalarMappable(norm = color_norm, cmap = 'gnuplot'), cax = cbar_ax)
#     plt.show()
#     fig2, (ax2, axc) = plt.subplots(1,2)
#     ax2.axes.set_aspect('equal')
#     tbp = np.sum([abundance_data[i]*d for i,d in zip(Hamiltonians.keys(),data)],axis = 0)
#     cmesh = ax2.pcolormesh(*np.meshgrid(slower_range*hertz_unit/1e6, MOT_range*hertz_unit/1e6),tbp.T, cmap = 'gnuplot')
#     ax2.set_xlabel("MOT detuning -$\\nu_{112}$ [MHz]")
#     ax2.set_ylabel("Slower detuning -$\\nu_{112}$ [MHz]")
#     fig2.colorbar(cmesh,ax=axc)
#     plt.show()


if __name__ == "__main__":
    import sys
    if len(sys.argv) > 1:
        captureVelocityForEq(hamiltonian, MOT_Beams_nov1(-0.5*gammasim, 0, 0, 0, s=2/6), mag_field)
        assert 1==2
    params = np.array(np.meshgrid(theta_range, phi_range, indexing='ij')).T.reshape([-1,2])
    params_reg_unit = params
    __spec__ = None
    import multiprocessing as mp
    total_runtime = len(theta_range)*len(phi_range)
    progress = mp.Value('i', 0)

    with mp.Pool(processes=CORES, initializer=init_worker, initargs=(progress,total_runtime)) as pool:
        data = np.array(pool.map(run, params))

    # saveable_data = np.array([d[0][-1]*velocity_unit for d in data])
    saveable_data = data
    proc_data = saveable_data.reshape([len(phi_range),len(theta_range)])
    # data = data.reshape([len(phi_range),len(theta_range),2])
    print(proc_data)
    np.savez("out.npz",phis=phi_range, thetas=theta_range, data=proc_data)
    # plot(proc_data)